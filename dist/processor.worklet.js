!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports):"function"==typeof define&&define.amd?define(["exports"],e):e((t="undefined"!=typeof globalThis?globalThis:t||self).advancedAnalyserProcessor={})}(this,(function(t){"use strict";function e(t){if(this.size=0|t,this.size<=1||0!=(this.size&this.size-1))throw new Error("FFT size must be a power of two and bigger than 1");this._csize=t<<1;for(var e=new Array(2*this.size),a=0;a<e.length;a+=2){const t=Math.PI*a/this.size;e[a]=Math.cos(t),e[a+1]=-Math.sin(t)}this.table=e;for(var i=0,s=1;this.size>s;s<<=1)i++;this._width=i%2==0?i-1:i,this._bitrev=new Array(1<<this._width);for(var n=0;n<this._bitrev.length;n++){this._bitrev[n]=0;for(var o=0;o<this._width;o+=2){var r=this._width-o-2;this._bitrev[n]|=(n>>>o&3)<<r}}this._out=null,this._data=null,this._inv=0}var a=e;e.prototype.fromComplexArray=function(t,e){for(var a=e||new Array(t.length>>>1),i=0;i<t.length;i+=2)a[i>>>1]=t[i];return a},e.prototype.createComplexArray=function(){const t=new Array(this._csize);for(var e=0;e<t.length;e++)t[e]=0;return t},e.prototype.toComplexArray=function(t,e){for(var a=e||this.createComplexArray(),i=0;i<a.length;i+=2)a[i]=t[i>>>1],a[i+1]=0;return a},e.prototype.completeSpectrum=function(t){for(var e=this._csize,a=e>>>1,i=2;i<a;i+=2)t[e-i]=t[i],t[e-i+1]=-t[i+1]},e.prototype.transform=function(t,e){if(t===e)throw new Error("Input and output buffers must be different");this._out=t,this._data=e,this._inv=0,this._transform4(),this._out=null,this._data=null},e.prototype.realTransform=function(t,e){if(t===e)throw new Error("Input and output buffers must be different");this._out=t,this._data=e,this._inv=0,this._realTransform4(),this._out=null,this._data=null},e.prototype.inverseTransform=function(t,e){if(t===e)throw new Error("Input and output buffers must be different");this._out=t,this._data=e,this._inv=1,this._transform4();for(var a=0;a<t.length;a++)t[a]/=this.size;this._out=null,this._data=null},e.prototype._transform4=function(){var t,e,a=this._out,i=this._csize,s=1<<this._width,n=i/s<<1,o=this._bitrev;if(4===n)for(t=0,e=0;t<i;t+=n,e++){const a=o[e];this._singleTransform2(t,a,s)}else for(t=0,e=0;t<i;t+=n,e++){const a=o[e];this._singleTransform4(t,a,s)}var r=this._inv?-1:1,l=this.table;for(s>>=2;s>=2;s>>=2){var f=(n=i/s<<1)>>>2;for(t=0;t<i;t+=n)for(var h=t+f,u=t,m=0;u<h;u+=2,m+=s){const t=u,e=t+f,i=e+f,s=i+f,n=a[t],o=a[t+1],h=a[e],_=a[e+1],c=a[i],p=a[i+1],y=a[s],d=a[s+1],D=n,b=o,g=l[m],T=r*l[m+1],F=h*g-_*T,v=h*T+_*g,A=l[2*m],q=r*l[2*m+1],w=c*A-p*q,B=c*q+p*A,C=l[3*m],S=r*l[3*m+1],L=y*C-d*S,M=y*S+d*C,z=D+w,I=b+B,W=D-w,x=b-B,k=F+L,P=v+M,N=r*(F-L),O=r*(v-M),R=z+k,E=I+P,U=z-k,j=I-P,V=W+O,G=x-N,H=W-O,J=x+N;a[t]=R,a[t+1]=E,a[e]=V,a[e+1]=G,a[i]=U,a[i+1]=j,a[s]=H,a[s+1]=J}}},e.prototype._singleTransform2=function(t,e,a){const i=this._out,s=this._data,n=s[e],o=s[e+1],r=s[e+a],l=s[e+a+1],f=n+r,h=o+l,u=n-r,m=o-l;i[t]=f,i[t+1]=h,i[t+2]=u,i[t+3]=m},e.prototype._singleTransform4=function(t,e,a){const i=this._out,s=this._data,n=this._inv?-1:1,o=2*a,r=3*a,l=s[e],f=s[e+1],h=s[e+a],u=s[e+a+1],m=s[e+o],_=s[e+o+1],c=s[e+r],p=s[e+r+1],y=l+m,d=f+_,D=l-m,b=f-_,g=h+c,T=u+p,F=n*(h-c),v=n*(u-p),A=y+g,q=d+T,w=D+v,B=b-F,C=y-g,S=d-T,L=D-v,M=b+F;i[t]=A,i[t+1]=q,i[t+2]=w,i[t+3]=B,i[t+4]=C,i[t+5]=S,i[t+6]=L,i[t+7]=M},e.prototype._realTransform4=function(){var t,e,a=this._out,i=this._csize,s=1<<this._width,n=i/s<<1,o=this._bitrev;if(4===n)for(t=0,e=0;t<i;t+=n,e++){const a=o[e];this._singleRealTransform2(t,a>>>1,s>>>1)}else for(t=0,e=0;t<i;t+=n,e++){const a=o[e];this._singleRealTransform4(t,a>>>1,s>>>1)}var r=this._inv?-1:1,l=this.table;for(s>>=2;s>=2;s>>=2){var f=(n=i/s<<1)>>>1,h=f>>>1,u=h>>>1;for(t=0;t<i;t+=n)for(var m=0,_=0;m<=u;m+=2,_+=s){var c=t+m,p=c+h,y=p+h,d=y+h,D=a[c],b=a[c+1],g=a[p],T=a[p+1],F=a[y],v=a[y+1],A=a[d],q=a[d+1],w=D,B=b,C=l[_],S=r*l[_+1],L=g*C-T*S,M=g*S+T*C,z=l[2*_],I=r*l[2*_+1],W=F*z-v*I,x=F*I+v*z,k=l[3*_],P=r*l[3*_+1],N=A*k-q*P,O=A*P+q*k,R=w+W,E=B+x,U=w-W,j=B-x,V=L+N,G=M+O,H=r*(L-N),J=r*(M-O),K=R+V,Q=E+G,X=U+J,Y=j-H;if(a[c]=K,a[c+1]=Q,a[p]=X,a[p+1]=Y,0!==m){if(m!==u){var Z=U+-r*J,$=-j+-r*H,tt=R+-r*V,et=-E- -r*G,at=t+h-m,it=t+f-m;a[at]=Z,a[at+1]=$,a[it]=tt,a[it+1]=et}}else{var st=R-V,nt=E-G;a[y]=st,a[y+1]=nt}}}},e.prototype._singleRealTransform2=function(t,e,a){const i=this._out,s=this._data,n=s[e],o=s[e+a],r=n+o,l=n-o;i[t]=r,i[t+1]=0,i[t+2]=l,i[t+3]=0},e.prototype._singleRealTransform4=function(t,e,a){const i=this._out,s=this._data,n=this._inv?-1:1,o=2*a,r=3*a,l=s[e],f=s[e+a],h=s[e+o],u=s[e+r],m=l+h,_=l-h,c=f+u,p=n*(f-u),y=m+c,d=_,D=-p,b=m-c,g=_,T=p;i[t]=y,i[t+1]=0,i[t+2]=d,i[t+3]=D,i[t+4]=b,i[t+5]=0,i[t+6]=g,i[t+7]=T};var i,s,n,o;!function(t){t[t.start=0]="start",t[t.stop=1]="stop",t[t.frequencyDataAvailable=2]="frequencyDataAvailable",t[t.byteFrequencyDataAvailable=3]="byteFrequencyDataAvailable",t[t.timeDomainDataAvailable=4]="timeDomainDataAvailable",t[t.byteTimeDomainDataAvailable=5]="byteTimeDomainDataAvailable",t[t.getFloatFrequencyData=6]="getFloatFrequencyData",t[t.requestedFloatFrequencyDataAvailable=7]="requestedFloatFrequencyDataAvailable",t[t.getByteFrequencyData=8]="getByteFrequencyData",t[t.requestedByteFrequencyDataAvailable=9]="requestedByteFrequencyDataAvailable",t[t.getFloatTimeDomainData=10]="getFloatTimeDomainData",t[t.requestedFloatTimeDomainDataAvailable=11]="requestedFloatTimeDomainDataAvailable",t[t.getByteTimeDomainData=12]="getByteTimeDomainData",t[t.requestedByteTimeDomainDataAvailable=13]="requestedByteTimeDomainDataAvailable",t[t.startedListeningTo=14]="startedListeningTo",t[t.stoppedListeningTo=15]="stoppedListeningTo"}(i||(i={})),function(t){t.fftSize="fftSize",t.samplesBetweenTransforms="samplesBetweenTransforms",t.timeDomainSamplesCount="timeDomainSamplesCount",t.windowFunction="windowFunction"}(s||(s={})),function(t){t.frequencydata="frequencydata",t.bytefrequencydata="bytefrequencydata",t.timedomaindata="timedomaindata",t.bytetimedomaindata="bytetimedomaindata"}(n||(n={})),function(t){t.none="none",t.blackmanWindow="blackmanWindow"}(o||(o={}));const r={none:()=>{},blackmanWindow:t=>{const e=t.length;for(let a=0;a<e;a++){const i=a/e,s=.42-.5*Math.cos(2*Math.PI*i)+.08*Math.cos(2*Math.PI*2*i);t[a]*=Math.abs(s)}}},l=t=>20*Math.log10(t),f=(t,e,a)=>Math.min(Math.max(t,e),a);class h extends AudioWorkletProcessor{_samplesCount=0;_count=0;_first=!0;_fftAnalyser;_fftSize;_fftInput;_fftOutput;_lastTransform;_samplesBetweenTransforms;_timeDomainSamplesCount;_windowFunctionType=o.blackmanWindow;_isListeningTo={frequencydata:!1,bytefrequencydata:!1,timedomaindata:!1,bytetimedomaindata:!1};_buffer=new Float32Array(32768);_minDecibels=-100;_maxDecibels=-30;_smoothingTimeConstant=0;_portMap=new Map;get _frequencyBinCount(){return this._fftSize/2}set frequencyBinCount(t){this._fftSize=2*t}get _isListeningToFrequencyData(){return this._isListeningTo.frequencydata||this._isListeningTo.bytefrequencydata}get _isListeningToTimeDomainData(){return this._isListeningTo.timedomaindata||this._isListeningTo.bytetimedomaindata}static get parameterDescriptors(){return[{name:"isRecording",defaultValue:1}]}constructor(t){super();const{fftSize:e,samplesBetweenTransforms:i,timeDomainSamplesCount:s,windowFunction:n=o.blackmanWindow}=t.processorOptions;this._fftAnalyser=new a(e),this._fftInput=new Float32Array(e),this._fftOutput=this._fftAnalyser.createComplexArray(),this._fftSize=e,this._lastTransform=new Float32Array(this._frequencyBinCount),this._samplesBetweenTransforms=i||e,this._timeDomainSamplesCount=s,this._samplesCount=0,this._windowFunctionType=n,this.port.onmessage=t=>this._onmessage(t.data)}_onmessage(t){switch(t.type){case i.getFloatFrequencyData:this._getFloatFrequencyData(t.id);break;case i.getByteFrequencyData:this._getByteFrequencyData(t.id);break;case i.getFloatTimeDomainData:this._getFloatTimeDomainData(t.id);break;case i.getByteTimeDomainData:this._getByteTimeDomainData(t.id);break;case i.startedListeningTo:this._isListeningTo[t.payload]=!0;break;case i.stoppedListeningTo:this._isListeningTo[t.payload]=!1}}_postMessage(t,e){this.port.postMessage(t,e)}_shouldFlushFrequencies(){return this._isListeningToFrequencyData&&this._samplesCount%this._samplesBetweenTransforms==0}_shouldFlushTimeDomainData(){return this._isListeningToTimeDomainData&&this._samplesCount%this._timeDomainSamplesCount==0}_appendToBuffer(t){this._buffer[this._samplesCount%this._buffer.length]=t,this._samplesCount=this._samplesCount+1,this._shouldFlushFrequencies()&&this._flushFrequencies(),this._shouldFlushTimeDomainData()&&this._flushTimeDomainSamples()}_updateFftInput(){this._fillArrayWithLastNSamples(this._fftInput),r[this._windowFunctionType](this._fftInput)}_fillArrayWithLastNSamples(t){const e=t.length,a=(this._samplesCount-e)%this._buffer.length;for(let i=0;i<e;i++)t[i]=a+i<0?0:this._buffer[(a+i)%this._buffer.length]}_convertFrequenciesToDb(t){const e=Math.min(this._lastTransform.length,t.length);if(e>0){const a=this._lastTransform;for(let i=0;i<e;++i)t[i]=l(a[i])}}_convertFrequenciesToByteData(t){const e=Math.min(this._lastTransform.length,t.length);if(e>0){const a=this._lastTransform,i=1/(this._maxDecibels-this._minDecibels);for(let s=0;s<e;++s){const e=a[s],n=255*(l(e)-this._minDecibels)*i;t[s]=f(0|n,0,255)}}}_convertTimeDomainDataToByteData(t,e){for(let a=0;a<t.length;++a)e[a]=f(128*(t[a]+1)|0,0,255)}_doFft(){this._fftAnalyser.realTransform(this._fftOutput,this._fftInput);const t=1/this._fftSize,e=f(this._smoothingTimeConstant,0,1);for(let a=0;a<this._lastTransform.length;a++){const i=Math.abs(Math.hypot(this._fftOutput[2*a],this._fftOutput[2*a+1]))*t;this._lastTransform[a]=e*this._lastTransform[a]+(1-e)*i}}_flushFrequencies(){if(this._updateFftInput(),this._doFft(),this._isListeningTo.frequencydata){const t=new Float32Array(this._frequencyBinCount);this._convertFrequenciesToDb(t),this._postMessage({type:i.frequencyDataAvailable,payload:t.buffer},[t.buffer])}if(this._isListeningTo.bytefrequencydata){const t=new Uint8Array(this._frequencyBinCount);this._convertFrequenciesToByteData(t),this._postMessage({type:i.byteFrequencyDataAvailable,payload:t.buffer},[t.buffer])}}_flushTimeDomainSamples(){if(this._isListeningTo.timedomaindata){const t=new Float32Array(this._timeDomainSamplesCount);this._fillArrayWithLastNSamples(t),this._postMessage({type:i.timeDomainDataAvailable,payload:t.buffer},[t.buffer])}if(this._isListeningTo.bytetimedomaindata){const t=new Float32Array(this._timeDomainSamplesCount);this._fillArrayWithLastNSamples(t);const e=new Uint8Array(this._timeDomainSamplesCount);this._convertTimeDomainDataToByteData(t,e),this._postMessage({type:i.byteTimeDomainDataAvailable,payload:e.buffer},[e.buffer])}}_getFloatFrequencyData(t){const e=new Float32Array(this._frequencyBinCount);this._updateFftInput(),this._doFft(),this._convertFrequenciesToDb(e),this._postMessage({id:t,type:i.requestedFloatFrequencyDataAvailable,payload:e.buffer},[e.buffer])}_getByteFrequencyData(t){this._updateFftInput(),this._doFft();const e=new Float32Array(this._timeDomainSamplesCount);this._fillArrayWithLastNSamples(e);const a=new Uint8Array(this._frequencyBinCount);this._convertFrequenciesToByteData(a),this._postMessage({id:t,type:i.requestedByteFrequencyDataAvailable,payload:a.buffer},[a.buffer])}_getFloatTimeDomainData(t){const e=new Float32Array(this._timeDomainSamplesCount);this._fillArrayWithLastNSamples(e),this._postMessage({id:t,type:i.requestedFloatTimeDomainDataAvailable,payload:e.buffer},[e.buffer])}_getByteTimeDomainData(t){const e=new Float32Array(this._timeDomainSamplesCount);this._fillArrayWithLastNSamples(e);const a=new Uint8Array(this._timeDomainSamplesCount);this._convertTimeDomainDataToByteData(e,a),this._postMessage({id:t,type:i.requestedByteTimeDomainDataAvailable,payload:a.buffer},[a.buffer])}process(t,e,a){const i=a.isRecording;for(let e=0;e<t.length;e++){if(1===i[e]&&t[0][0])for(let e=0;e<t[0][0].length;e++)this._appendToBuffer(t[0][0][e])}return!0}}registerProcessor("AdvancedAnalyserProcessor",h),t.AdvancedAnalyserProcessor=h,Object.defineProperty(t,"__esModule",{value:!0})}));
