!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports):"function"==typeof define&&define.amd?define(["exports"],e):e((t="undefined"!=typeof globalThis?globalThis:t||self).advancedAnalyserProcessor={})}(this,(function(t){"use strict";function e(t){if(this.size=0|t,this.size<=1||0!=(this.size&this.size-1))throw new Error("FFT size must be a power of two and bigger than 1");this._csize=t<<1;for(var e=new Array(2*this.size),s=0;s<e.length;s+=2){const t=Math.PI*s/this.size;e[s]=Math.cos(t),e[s+1]=-Math.sin(t)}this.table=e;for(var a=0,i=1;this.size>i;i<<=1)a++;this._width=a%2==0?a-1:a,this._bitrev=new Array(1<<this._width);for(var r=0;r<this._bitrev.length;r++){this._bitrev[r]=0;for(var n=0;n<this._width;n+=2){var o=this._width-n-2;this._bitrev[r]|=(r>>>n&3)<<o}}this._out=null,this._data=null,this._inv=0}var s=e;e.prototype.fromComplexArray=function(t,e){for(var s=e||new Array(t.length>>>1),a=0;a<t.length;a+=2)s[a>>>1]=t[a];return s},e.prototype.createComplexArray=function(){const t=new Array(this._csize);for(var e=0;e<t.length;e++)t[e]=0;return t},e.prototype.toComplexArray=function(t,e){for(var s=e||this.createComplexArray(),a=0;a<s.length;a+=2)s[a]=t[a>>>1],s[a+1]=0;return s},e.prototype.completeSpectrum=function(t){for(var e=this._csize,s=e>>>1,a=2;a<s;a+=2)t[e-a]=t[a],t[e-a+1]=-t[a+1]},e.prototype.transform=function(t,e){if(t===e)throw new Error("Input and output buffers must be different");this._out=t,this._data=e,this._inv=0,this._transform4(),this._out=null,this._data=null},e.prototype.realTransform=function(t,e){if(t===e)throw new Error("Input and output buffers must be different");this._out=t,this._data=e,this._inv=0,this._realTransform4(),this._out=null,this._data=null},e.prototype.inverseTransform=function(t,e){if(t===e)throw new Error("Input and output buffers must be different");this._out=t,this._data=e,this._inv=1,this._transform4();for(var s=0;s<t.length;s++)t[s]/=this.size;this._out=null,this._data=null},e.prototype._transform4=function(){var t,e,s=this._out,a=this._csize,i=1<<this._width,r=a/i<<1,n=this._bitrev;if(4===r)for(t=0,e=0;t<a;t+=r,e++){const s=n[e];this._singleTransform2(t,s,i)}else for(t=0,e=0;t<a;t+=r,e++){const s=n[e];this._singleTransform4(t,s,i)}var o=this._inv?-1:1,f=this.table;for(i>>=2;i>=2;i>>=2){var h=(r=a/i<<1)>>>2;for(t=0;t<a;t+=r)for(var l=t+h,_=t,u=0;_<l;_+=2,u+=i){const t=_,e=t+h,a=e+h,i=a+h,r=s[t],n=s[t+1],l=s[e],c=s[e+1],p=s[a],y=s[a+1],d=s[i],m=s[i+1],g=r,b=n,v=f[u],T=o*f[u+1],F=l*v-c*T,A=l*T+c*v,D=f[2*u],w=o*f[2*u+1],q=p*D-y*w,z=p*w+y*D,B=f[3*u],M=o*f[3*u+1],C=d*B-m*M,S=d*M+m*B,x=g+q,L=b+z,I=g-q,O=b-z,P=F+C,R=A+S,E=o*(F-C),k=o*(A-S),j=x+P,U=L+R,V=x-P,W=L-R,G=I+k,H=O-E,J=I-k,K=O+E;s[t]=j,s[t+1]=U,s[e]=G,s[e+1]=H,s[a]=V,s[a+1]=W,s[i]=J,s[i+1]=K}}},e.prototype._singleTransform2=function(t,e,s){const a=this._out,i=this._data,r=i[e],n=i[e+1],o=i[e+s],f=i[e+s+1],h=r+o,l=n+f,_=r-o,u=n-f;a[t]=h,a[t+1]=l,a[t+2]=_,a[t+3]=u},e.prototype._singleTransform4=function(t,e,s){const a=this._out,i=this._data,r=this._inv?-1:1,n=2*s,o=3*s,f=i[e],h=i[e+1],l=i[e+s],_=i[e+s+1],u=i[e+n],c=i[e+n+1],p=i[e+o],y=i[e+o+1],d=f+u,m=h+c,g=f-u,b=h-c,v=l+p,T=_+y,F=r*(l-p),A=r*(_-y),D=d+v,w=m+T,q=g+A,z=b-F,B=d-v,M=m-T,C=g-A,S=b+F;a[t]=D,a[t+1]=w,a[t+2]=q,a[t+3]=z,a[t+4]=B,a[t+5]=M,a[t+6]=C,a[t+7]=S},e.prototype._realTransform4=function(){var t,e,s=this._out,a=this._csize,i=1<<this._width,r=a/i<<1,n=this._bitrev;if(4===r)for(t=0,e=0;t<a;t+=r,e++){const s=n[e];this._singleRealTransform2(t,s>>>1,i>>>1)}else for(t=0,e=0;t<a;t+=r,e++){const s=n[e];this._singleRealTransform4(t,s>>>1,i>>>1)}var o=this._inv?-1:1,f=this.table;for(i>>=2;i>=2;i>>=2){var h=(r=a/i<<1)>>>1,l=h>>>1,_=l>>>1;for(t=0;t<a;t+=r)for(var u=0,c=0;u<=_;u+=2,c+=i){var p=t+u,y=p+l,d=y+l,m=d+l,g=s[p],b=s[p+1],v=s[y],T=s[y+1],F=s[d],A=s[d+1],D=s[m],w=s[m+1],q=g,z=b,B=f[c],M=o*f[c+1],C=v*B-T*M,S=v*M+T*B,x=f[2*c],L=o*f[2*c+1],I=F*x-A*L,O=F*L+A*x,P=f[3*c],R=o*f[3*c+1],E=D*P-w*R,k=D*R+w*P,j=q+I,U=z+O,V=q-I,W=z-O,G=C+E,H=S+k,J=o*(C-E),K=o*(S-k),N=j+G,Q=U+H,X=V+K,Y=W-J;if(s[p]=N,s[p+1]=Q,s[y]=X,s[y+1]=Y,0!==u){if(u!==_){var Z=V+-o*K,$=-W+-o*J,tt=j+-o*G,et=-U- -o*H,st=t+l-u,at=t+h-u;s[st]=Z,s[st+1]=$,s[at]=tt,s[at+1]=et}}else{var it=j-G,rt=U-H;s[d]=it,s[d+1]=rt}}}},e.prototype._singleRealTransform2=function(t,e,s){const a=this._out,i=this._data,r=i[e],n=i[e+s],o=r+n,f=r-n;a[t]=o,a[t+1]=0,a[t+2]=f,a[t+3]=0},e.prototype._singleRealTransform4=function(t,e,s){const a=this._out,i=this._data,r=this._inv?-1:1,n=2*s,o=3*s,f=i[e],h=i[e+s],l=i[e+n],_=i[e+o],u=f+l,c=f-l,p=h+_,y=r*(h-_),d=u+p,m=c,g=-y,b=u-p,v=c,T=y;a[t]=d,a[t+1]=0,a[t+2]=m,a[t+3]=g,a[t+4]=b,a[t+5]=0,a[t+6]=v,a[t+7]=T};var a,i,r;!function(t){t[t.start=0]="start",t[t.stop=1]="stop",t[t.frequencyDataAvailable=2]="frequencyDataAvailable",t[t.byteFrequencyDataAvailable=3]="byteFrequencyDataAvailable",t[t.getFloatFrequencyData=4]="getFloatFrequencyData",t[t.requestedFloatFrequencyDataAvailable=5]="requestedFloatFrequencyDataAvailable",t[t.getByteFrequencyData=6]="getByteFrequencyData",t[t.requestedByteFrequencyDataAvailable=7]="requestedByteFrequencyDataAvailable",t[t.floatTimeDomainData=8]="floatTimeDomainData",t[t.byteTimeDomainData=9]="byteTimeDomainData",t[t.startedListeningTo=10]="startedListeningTo",t[t.stoppedListeningTo=11]="stoppedListeningTo"}(a||(a={})),function(t){t.fftSize="fftSize",t.samplesBetweenTransforms="samplesBetweenTransforms",t.dataAsByteArray="dataAsByteArray"}(i||(i={})),function(t){t.frequencydata="frequencydata",t.bytefrequencydata="bytefrequencydata"}(r||(r={}));const n=t=>20*Math.log10(t),o=(t,e,s)=>Math.min(Math.max(t,e),s);class f extends AudioWorkletProcessor{_samplesCount=0;_count=0;_first=!0;_fftAnalyser;_fftSize;_fftInput;_fftOutput;_lastTransform;_samplesBetweenTransforms;_isListeningTo={frequencydata:!1,bytefrequencydata:!1};_buffer=new Float32Array(32768);_minDecibels=-100;_maxDecibels=-30;_smoothingTimeConstant=0;_portMap=new Map;static get parameterDescriptors(){return[{name:"isRecording",defaultValue:1}]}constructor(t){super();const{fftSize:e,samplesBetweenTransforms:a}=t.processorOptions;this._fftAnalyser=new s(e),this._fftInput=new Float32Array(e),this._fftOutput=this._fftAnalyser.createComplexArray(),this._lastTransform=new Float32Array(e/2),this._fftSize=e,this._samplesBetweenTransforms=a,this._samplesCount=0,this.port.onmessage=t=>this._onmessage(t.data)}_onmessage(t){switch(t.type){case a.getFloatFrequencyData:this._getFloatFrequencyData(t.id);break;case a.startedListeningTo:this._isListeningTo[t.payload]=!0;break;case a.stoppedListeningTo:this._isListeningTo[t.payload]=!1}}_postMessage(t,e){this.port.postMessage(t,e)}_shouldFlush(){return(this._isListeningTo.frequencydata||this._isListeningTo.bytefrequencydata)&&this._samplesCount%this._samplesBetweenTransforms==0}_appendToBuffer(t){this._buffer[this._samplesCount%this._buffer.length]=t,this._samplesCount=this._samplesCount+1,this._shouldFlush()&&this._flush()}_updateFftInput(){const t=(this._samplesCount-this._fftSize)%this._buffer.length;for(let e=0;e<this._fftInput.length;e++)this._fftInput[e]=t+e<0?0:this._buffer[(t+e)%this._buffer.length]}_convertFloatToDb(t){const e=Math.min(this._lastTransform.length,t.length);if(e>0){const s=this._lastTransform;for(let a=0;a<e;++a)t[a]=n(s[a])}}_convertToByteData(t){const e=Math.min(this._lastTransform.length,t.length);if(e>0){const s=this._lastTransform,a=1/(this._maxDecibels-this._minDecibels);for(let i=0;i<e;++i){const e=s[i],r=255*(n(e)-this._minDecibels)*a;t[i]=o(0|r,0,255)}}}_doFft(){this._updateFftInput(),this._fftAnalyser.realTransform(this._fftOutput,this._fftInput);const t=1/this._fftSize,e=o(this._smoothingTimeConstant,0,1);for(let s=0;s<this._lastTransform.length;s++){const a=Math.abs(Math.hypot(this._fftOutput[2*s],this._fftOutput[2*s+1]))*t;this._lastTransform[s]=e*this._lastTransform[s]+(1-e)*a}}get _fftBinSize(){return this._fftSize/2}_flush(){if(this._doFft(),this._isListeningTo.frequencydata){const t=new Float32Array(this._fftBinSize);this._convertFloatToDb(t),this._postMessage({type:a.frequencyDataAvailable,payload:t})}else{const t=new Uint8Array(this._fftBinSize);this._convertToByteData(t),this._postMessage({type:a.byteFrequencyDataAvailable,payload:t})}}_getFloatFrequencyData(t){const e=new Float32Array(this._fftSize/2);this._doFft(),this._convertFloatToDb(e),this._postMessage({id:t,type:a.requestedFloatFrequencyDataAvailable,payload:e.buffer},[e.buffer])}_getByteFrequencyData(t){this._doFft();const e=new Uint8Array(this._fftSize/2);this._convertToByteData(e),this._postMessage({id:t,type:a.requestedByteFrequencyDataAvailable,payload:e.buffer},[e.buffer])}process(t,e,s){const a=s.isRecording;for(let e=0;e<t.length;e++){if(1===a[e]&&t[0][0])for(let e=0;e<t[0][0].length;e++)this._appendToBuffer(t[0][0][e])}return!0}}registerProcessor("AdvancedAnalyserProcessor",f),t.AdvancedAnalyserProcessor=f,Object.defineProperty(t,"__esModule",{value:!0})}));
