!function(t){"function"==typeof define&&define.amd?define(t):t()}((function(){"use strict";function t(t){if(this.size=0|t,this.size<=1||0!=(this.size&this.size-1))throw new Error("FFT size must be a power of two and bigger than 1");this._csize=t<<1;for(var s=new Array(2*this.size),r=0;r<s.length;r+=2){const t=Math.PI*r/this.size;s[r]=Math.cos(t),s[r+1]=-Math.sin(t)}this.table=s;for(var e=0,i=1;this.size>i;i<<=1)e++;this._width=e%2==0?e-1:e,this._bitrev=new Array(1<<this._width);for(var o=0;o<this._bitrev.length;o++){this._bitrev[o]=0;for(var n=0;n<this._width;n+=2){var a=this._width-n-2;this._bitrev[o]|=(o>>>n&3)<<a}}this._out=null,this._data=null,this._inv=0}var s,r=t;t.prototype.fromComplexArray=function(t,s){for(var r=s||new Array(t.length>>>1),e=0;e<t.length;e+=2)r[e>>>1]=t[e];return r},t.prototype.createComplexArray=function(){const t=new Array(this._csize);for(var s=0;s<t.length;s++)t[s]=0;return t},t.prototype.toComplexArray=function(t,s){for(var r=s||this.createComplexArray(),e=0;e<r.length;e+=2)r[e]=t[e>>>1],r[e+1]=0;return r},t.prototype.completeSpectrum=function(t){for(var s=this._csize,r=s>>>1,e=2;e<r;e+=2)t[s-e]=t[e],t[s-e+1]=-t[e+1]},t.prototype.transform=function(t,s){if(t===s)throw new Error("Input and output buffers must be different");this._out=t,this._data=s,this._inv=0,this._transform4(),this._out=null,this._data=null},t.prototype.realTransform=function(t,s){if(t===s)throw new Error("Input and output buffers must be different");this._out=t,this._data=s,this._inv=0,this._realTransform4(),this._out=null,this._data=null},t.prototype.inverseTransform=function(t,s){if(t===s)throw new Error("Input and output buffers must be different");this._out=t,this._data=s,this._inv=1,this._transform4();for(var r=0;r<t.length;r++)t[r]/=this.size;this._out=null,this._data=null},t.prototype._transform4=function(){var t,s,r=this._out,e=this._csize,i=1<<this._width,o=e/i<<1,n=this._bitrev;if(4===o)for(t=0,s=0;t<e;t+=o,s++){const r=n[s];this._singleTransform2(t,r,i)}else for(t=0,s=0;t<e;t+=o,s++){const r=n[s];this._singleTransform4(t,r,i)}var a=this._inv?-1:1,f=this.table;for(i>>=2;i>=2;i>>=2){var h=(o=e/i<<1)>>>2;for(t=0;t<e;t+=o)for(var _=t+h,l=t,u=0;l<_;l+=2,u+=i){const t=l,s=t+h,e=s+h,i=e+h,o=r[t],n=r[t+1],_=r[s],p=r[s+1],m=r[e],c=r[e+1],d=r[i],y=r[i+1],v=o,T=n,w=f[u],g=a*f[u+1],b=_*w-p*g,A=_*g+p*w,z=f[2*u],B=a*f[2*u+1],C=m*z-c*B,S=m*B+c*z,M=f[3*u],F=a*f[3*u+1],x=d*M-y*F,E=d*F+y*M,R=v+C,O=T+S,I=v-C,P=T-S,W=b+x,k=A+E,D=a*(b-x),L=a*(A-E),U=R+W,V=O+k,j=R-W,q=O-k,G=I+L,H=P-D,J=I-L,K=P+D;r[t]=U,r[t+1]=V,r[s]=G,r[s+1]=H,r[e]=j,r[e+1]=q,r[i]=J,r[i+1]=K}}},t.prototype._singleTransform2=function(t,s,r){const e=this._out,i=this._data,o=i[s],n=i[s+1],a=i[s+r],f=i[s+r+1],h=o+a,_=n+f,l=o-a,u=n-f;e[t]=h,e[t+1]=_,e[t+2]=l,e[t+3]=u},t.prototype._singleTransform4=function(t,s,r){const e=this._out,i=this._data,o=this._inv?-1:1,n=2*r,a=3*r,f=i[s],h=i[s+1],_=i[s+r],l=i[s+r+1],u=i[s+n],p=i[s+n+1],m=i[s+a],c=i[s+a+1],d=f+u,y=h+p,v=f-u,T=h-p,w=_+m,g=l+c,b=o*(_-m),A=o*(l-c),z=d+w,B=y+g,C=v+A,S=T-b,M=d-w,F=y-g,x=v-A,E=T+b;e[t]=z,e[t+1]=B,e[t+2]=C,e[t+3]=S,e[t+4]=M,e[t+5]=F,e[t+6]=x,e[t+7]=E},t.prototype._realTransform4=function(){var t,s,r=this._out,e=this._csize,i=1<<this._width,o=e/i<<1,n=this._bitrev;if(4===o)for(t=0,s=0;t<e;t+=o,s++){const r=n[s];this._singleRealTransform2(t,r>>>1,i>>>1)}else for(t=0,s=0;t<e;t+=o,s++){const r=n[s];this._singleRealTransform4(t,r>>>1,i>>>1)}var a=this._inv?-1:1,f=this.table;for(i>>=2;i>=2;i>>=2){var h=(o=e/i<<1)>>>1,_=h>>>1,l=_>>>1;for(t=0;t<e;t+=o)for(var u=0,p=0;u<=l;u+=2,p+=i){var m=t+u,c=m+_,d=c+_,y=d+_,v=r[m],T=r[m+1],w=r[c],g=r[c+1],b=r[d],A=r[d+1],z=r[y],B=r[y+1],C=v,S=T,M=f[p],F=a*f[p+1],x=w*M-g*F,E=w*F+g*M,R=f[2*p],O=a*f[2*p+1],I=b*R-A*O,P=b*O+A*R,W=f[3*p],k=a*f[3*p+1],D=z*W-B*k,L=z*k+B*W,U=C+I,V=S+P,j=C-I,q=S-P,G=x+D,H=E+L,J=a*(x-D),K=a*(E-L),N=U+G,Q=V+H,X=j+K,Y=q-J;if(r[m]=N,r[m+1]=Q,r[c]=X,r[c+1]=Y,0!==u){if(u!==l){var Z=j+-a*K,$=-q+-a*J,tt=U+-a*G,st=-V- -a*H,rt=t+_-u,et=t+h-u;r[rt]=Z,r[rt+1]=$,r[et]=tt,r[et+1]=st}}else{var it=U-G,ot=V-H;r[d]=it,r[d+1]=ot}}}},t.prototype._singleRealTransform2=function(t,s,r){const e=this._out,i=this._data,o=i[s],n=i[s+r],a=o+n,f=o-n;e[t]=a,e[t+1]=0,e[t+2]=f,e[t+3]=0},t.prototype._singleRealTransform4=function(t,s,r){const e=this._out,i=this._data,o=this._inv?-1:1,n=2*r,a=3*r,f=i[s],h=i[s+r],_=i[s+n],l=i[s+a],u=f+_,p=f-_,m=h+l,c=o*(h-l),d=u+m,y=p,v=-c,T=u-m,w=p,g=c;e[t]=d,e[t+1]=0,e[t+2]=y,e[t+3]=v,e[t+4]=T,e[t+5]=0,e[t+6]=w,e[t+7]=g},function(t){t.sendWasmModule="send-wasm-module",t.wasmModuleLoaded="wasm-module-loaded",t.initFftAnalyser="init-fft-analyser",t.start="start",t.stop="stop",t.dataAvailable="data-available"}(s||(s={}));const e=t=>{const s=255*(t- -100)*.014285714285714285;return Math.max(0|s,0)};class i extends AudioWorkletProcessor{_samplesCount=0;_count=0;_first=!0;_fftAnalyser;_fftSize;_fftOutput;_lastTransform;_lastTransformAsBytes;_samplesBetweenTransforms;_buffer;static get parameterDescriptors(){return[{name:"isRecording",defaultValue:1}]}constructor(){super(),this.port.onmessage=t=>this.onmessage(t.data)}onmessage(t){if(t.type===s.initFftAnalyser){const{fftSize:s,samplesBetweenTransforms:e}=t;this._fftAnalyser=new r(s),this._fftOutput=this._fftAnalyser.createComplexArray(),this._lastTransform=new Float32Array(s/2),this._lastTransformAsBytes=new Uint8Array(s/2),this._fftSize=s,this._samplesBetweenTransforms=e,this._buffer=new Float32Array(this._fftSize),this._initBuffer()}}_initBuffer(){for(let t=this._samplesBetweenTransforms;t<this._fftSize;t++)this._buffer[t-this._samplesBetweenTransforms]=this._buffer[t];this._samplesCount=0}_isBufferEmpty(){return 0===this._samplesCount}_shouldTransformSamples(){return this._samplesCount===this._samplesBetweenTransforms}_appendToBuffer(t){this._shouldTransformSamples()&&this._flush(),this._buffer[this._fftSize-this._samplesBetweenTransforms+this._samplesCount]=t,this._samplesCount+=1}_doFft(){let t=this._buffer;this._samplesCount<this._samplesBetweenTransforms&&(t=t.slice(0,this._fftSize-this._samplesBetweenTransforms+this._samplesCount)),this._fftAnalyser.realTransform(this._fftOutput,t);const s=1/this._fftSize;for(let t=0;t<this._lastTransform.length;t++){const i=(r=Math.abs(Math.hypot(this._fftOutput[2*t],this._fftOutput[2*t+1]))*s,20*Math.log10(r));this._lastTransform[t]=i,this._lastTransformAsBytes[t]=e(i)}var r}_flush(){this._doFft(),this.port.postMessage({type:s.dataAvailable,currentTime:currentTime,data:this._lastTransformAsBytes}),this._initBuffer()}_recordingStopped(){this.port.postMessage({type:s.stop})}process(t,s,r){if(!this._buffer)return!0;const e=r.isRecording;for(let s=0;s<t.length;s++){const r=1===e[s]&&t[0][0];if(r||this._isBufferEmpty()||(this._flush(),this._recordingStopped()),r)for(let s=0;s<t[0][0].length;s++)this._appendToBuffer(t[0][0][s])}return!0}}registerProcessor("AdvancedAnalyserProcessor",i)}));
