!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports):"function"==typeof define&&define.amd?define(["exports"],e):e((t="undefined"!=typeof globalThis?globalThis:t||self).advancedAnalyserProcessor={})}(this,(function(t){"use strict";function e(t){if(this.size=0|t,this.size<=1||0!=(this.size&this.size-1))throw new Error("FFT size must be a power of two and bigger than 1");this._csize=t<<1;for(var e=new Array(2*this.size),s=0;s<e.length;s+=2){const t=Math.PI*s/this.size;e[s]=Math.cos(t),e[s+1]=-Math.sin(t)}this.table=e;for(var a=0,n=1;this.size>n;n<<=1)a++;this._width=a%2==0?a-1:a,this._bitrev=new Array(1<<this._width);for(var i=0;i<this._bitrev.length;i++){this._bitrev[i]=0;for(var o=0;o<this._width;o+=2){var r=this._width-o-2;this._bitrev[i]|=(i>>>o&3)<<r}}this._out=null,this._data=null,this._inv=0}var s=e;e.prototype.fromComplexArray=function(t,e){for(var s=e||new Array(t.length>>>1),a=0;a<t.length;a+=2)s[a>>>1]=t[a];return s},e.prototype.createComplexArray=function(){const t=new Array(this._csize);for(var e=0;e<t.length;e++)t[e]=0;return t},e.prototype.toComplexArray=function(t,e){for(var s=e||this.createComplexArray(),a=0;a<s.length;a+=2)s[a]=t[a>>>1],s[a+1]=0;return s},e.prototype.completeSpectrum=function(t){for(var e=this._csize,s=e>>>1,a=2;a<s;a+=2)t[e-a]=t[a],t[e-a+1]=-t[a+1]},e.prototype.transform=function(t,e){if(t===e)throw new Error("Input and output buffers must be different");this._out=t,this._data=e,this._inv=0,this._transform4(),this._out=null,this._data=null},e.prototype.realTransform=function(t,e){if(t===e)throw new Error("Input and output buffers must be different");this._out=t,this._data=e,this._inv=0,this._realTransform4(),this._out=null,this._data=null},e.prototype.inverseTransform=function(t,e){if(t===e)throw new Error("Input and output buffers must be different");this._out=t,this._data=e,this._inv=1,this._transform4();for(var s=0;s<t.length;s++)t[s]/=this.size;this._out=null,this._data=null},e.prototype._transform4=function(){var t,e,s=this._out,a=this._csize,n=1<<this._width,i=a/n<<1,o=this._bitrev;if(4===i)for(t=0,e=0;t<a;t+=i,e++){const s=o[e];this._singleTransform2(t,s,n)}else for(t=0,e=0;t<a;t+=i,e++){const s=o[e];this._singleTransform4(t,s,n)}var r=this._inv?-1:1,f=this.table;for(n>>=2;n>=2;n>>=2){var h=(i=a/n<<1)>>>2;for(t=0;t<a;t+=i)for(var l=t+h,u=t,_=0;u<l;u+=2,_+=n){const t=u,e=t+h,a=e+h,n=a+h,i=s[t],o=s[t+1],l=s[e],c=s[e+1],p=s[a],y=s[a+1],d=s[n],m=s[n+1],b=i,g=o,v=f[_],T=r*f[_+1],w=l*v-c*T,F=l*T+c*v,A=f[2*_],D=r*f[2*_+1],q=p*A-y*D,z=p*D+y*A,M=f[3*_],B=r*f[3*_+1],C=d*M-m*B,I=d*B+m*M,S=b+q,x=g+z,L=b-q,P=g-z,k=w+C,O=F+I,R=r*(w-C),W=r*(F-I),E=S+k,j=x+O,U=S-k,V=x-O,G=L+W,H=P-R,J=L-W,K=P+R;s[t]=E,s[t+1]=j,s[e]=G,s[e+1]=H,s[a]=U,s[a+1]=V,s[n]=J,s[n+1]=K}}},e.prototype._singleTransform2=function(t,e,s){const a=this._out,n=this._data,i=n[e],o=n[e+1],r=n[e+s],f=n[e+s+1],h=i+r,l=o+f,u=i-r,_=o-f;a[t]=h,a[t+1]=l,a[t+2]=u,a[t+3]=_},e.prototype._singleTransform4=function(t,e,s){const a=this._out,n=this._data,i=this._inv?-1:1,o=2*s,r=3*s,f=n[e],h=n[e+1],l=n[e+s],u=n[e+s+1],_=n[e+o],c=n[e+o+1],p=n[e+r],y=n[e+r+1],d=f+_,m=h+c,b=f-_,g=h-c,v=l+p,T=u+y,w=i*(l-p),F=i*(u-y),A=d+v,D=m+T,q=b+F,z=g-w,M=d-v,B=m-T,C=b-F,I=g+w;a[t]=A,a[t+1]=D,a[t+2]=q,a[t+3]=z,a[t+4]=M,a[t+5]=B,a[t+6]=C,a[t+7]=I},e.prototype._realTransform4=function(){var t,e,s=this._out,a=this._csize,n=1<<this._width,i=a/n<<1,o=this._bitrev;if(4===i)for(t=0,e=0;t<a;t+=i,e++){const s=o[e];this._singleRealTransform2(t,s>>>1,n>>>1)}else for(t=0,e=0;t<a;t+=i,e++){const s=o[e];this._singleRealTransform4(t,s>>>1,n>>>1)}var r=this._inv?-1:1,f=this.table;for(n>>=2;n>=2;n>>=2){var h=(i=a/n<<1)>>>1,l=h>>>1,u=l>>>1;for(t=0;t<a;t+=i)for(var _=0,c=0;_<=u;_+=2,c+=n){var p=t+_,y=p+l,d=y+l,m=d+l,b=s[p],g=s[p+1],v=s[y],T=s[y+1],w=s[d],F=s[d+1],A=s[m],D=s[m+1],q=b,z=g,M=f[c],B=r*f[c+1],C=v*M-T*B,I=v*B+T*M,S=f[2*c],x=r*f[2*c+1],L=w*S-F*x,P=w*x+F*S,k=f[3*c],O=r*f[3*c+1],R=A*k-D*O,W=A*O+D*k,E=q+L,j=z+P,U=q-L,V=z-P,G=C+R,H=I+W,J=r*(C-R),K=r*(I-W),N=E+G,Q=j+H,X=U+K,Y=V-J;if(s[p]=N,s[p+1]=Q,s[y]=X,s[y+1]=Y,0!==_){if(_!==u){var Z=U+-r*K,$=-V+-r*J,tt=E+-r*G,et=-j- -r*H,st=t+l-_,at=t+h-_;s[st]=Z,s[st+1]=$,s[at]=tt,s[at+1]=et}}else{var nt=E-G,it=j-H;s[d]=nt,s[d+1]=it}}}},e.prototype._singleRealTransform2=function(t,e,s){const a=this._out,n=this._data,i=n[e],o=n[e+s],r=i+o,f=i-o;a[t]=r,a[t+1]=0,a[t+2]=f,a[t+3]=0},e.prototype._singleRealTransform4=function(t,e,s){const a=this._out,n=this._data,i=this._inv?-1:1,o=2*s,r=3*s,f=n[e],h=n[e+s],l=n[e+o],u=n[e+r],_=f+l,c=f-l,p=h+u,y=i*(h-u),d=_+p,m=c,b=-y,g=_-p,v=c,T=y;a[t]=d,a[t+1]=0,a[t+2]=m,a[t+3]=b,a[t+4]=g,a[t+5]=0,a[t+6]=v,a[t+7]=T};var a,n,i,o;!function(t){t[t.start=0]="start",t[t.stop=1]="stop",t[t.frequencyDataAvailable=2]="frequencyDataAvailable",t[t.byteFrequencyDataAvailable=3]="byteFrequencyDataAvailable",t[t.getFloatFrequencyData=4]="getFloatFrequencyData",t[t.requestedFloatFrequencyDataAvailable=5]="requestedFloatFrequencyDataAvailable",t[t.getByteFrequencyData=6]="getByteFrequencyData",t[t.requestedByteFrequencyDataAvailable=7]="requestedByteFrequencyDataAvailable",t[t.floatTimeDomainData=8]="floatTimeDomainData",t[t.byteTimeDomainData=9]="byteTimeDomainData",t[t.startedListeningTo=10]="startedListeningTo",t[t.stoppedListeningTo=11]="stoppedListeningTo"}(a||(a={})),function(t){t.fftSize="fftSize",t.samplesBetweenTransforms="samplesBetweenTransforms",t.dataAsByteArray="dataAsByteArray",t.windowFunction="windowFunction"}(n||(n={})),function(t){t.frequencydata="frequencydata",t.bytefrequencydata="bytefrequencydata"}(i||(i={})),function(t){t.none="none",t.blackmanWindow="blackmanWindow"}(o||(o={}));const r={none:()=>{},blackmanWindow:t=>{const e=t.length;for(let s=0;s<e;s++){const a=s/e,n=.42-.5*Math.cos(2*Math.PI*a)+.08*Math.cos(2*Math.PI*2*a);t[s]*=Math.abs(n)}}},f=t=>20*Math.log10(t),h=(t,e,s)=>Math.min(Math.max(t,e),s);class l extends AudioWorkletProcessor{_samplesCount=0;_count=0;_first=!0;_fftAnalyser;_fftSize;_fftInput;_fftOutput;_lastTransform;_samplesBetweenTransforms;_windowFunctionType=o.blackmanWindow;_isListeningTo={frequencydata:!1,bytefrequencydata:!1};_buffer=new Float32Array(32768);_minDecibels=-100;_maxDecibels=-30;_smoothingTimeConstant=0;_portMap=new Map;static get parameterDescriptors(){return[{name:"isRecording",defaultValue:1}]}constructor(t){super();const{fftSize:e,samplesBetweenTransforms:a,windowFunction:n=o.blackmanWindow}=t.processorOptions;this._fftAnalyser=new s(e),this._fftInput=new Float32Array(e),this._fftOutput=this._fftAnalyser.createComplexArray(),this._lastTransform=new Float32Array(e/2),this._fftSize=e,this._samplesBetweenTransforms=a,this._samplesCount=0,this._windowFunctionType=n,this.port.onmessage=t=>this._onmessage(t.data)}_onmessage(t){switch(t.type){case a.getFloatFrequencyData:this._getFloatFrequencyData(t.id);break;case a.startedListeningTo:this._isListeningTo[t.payload]=!0;break;case a.stoppedListeningTo:this._isListeningTo[t.payload]=!1}}_postMessage(t,e){this.port.postMessage(t,e)}_shouldFlush(){return(this._isListeningTo.frequencydata||this._isListeningTo.bytefrequencydata)&&this._samplesCount%this._samplesBetweenTransforms==0}_appendToBuffer(t){this._buffer[this._samplesCount%this._buffer.length]=t,this._samplesCount=this._samplesCount+1,this._shouldFlush()&&this._flush()}_updateFftInput(){const t=(this._samplesCount-this._fftSize)%this._buffer.length;for(let e=0;e<this._fftInput.length;e++)this._fftInput[e]=t+e<0?0:this._buffer[(t+e)%this._buffer.length];r[this._windowFunctionType](this._fftInput)}_convertFloatToDb(t){const e=Math.min(this._lastTransform.length,t.length);if(e>0){const s=this._lastTransform;for(let a=0;a<e;++a)t[a]=f(s[a])}}_convertToByteData(t){const e=Math.min(this._lastTransform.length,t.length);if(e>0){const s=this._lastTransform,a=1/(this._maxDecibels-this._minDecibels);for(let n=0;n<e;++n){const e=s[n],i=255*(f(e)-this._minDecibels)*a;t[n]=h(0|i,0,255)}}}_doFft(){this._updateFftInput(),this._fftAnalyser.realTransform(this._fftOutput,this._fftInput);const t=1/this._fftSize,e=h(this._smoothingTimeConstant,0,1);for(let s=0;s<this._lastTransform.length;s++){const a=Math.abs(Math.hypot(this._fftOutput[2*s],this._fftOutput[2*s+1]))*t;this._lastTransform[s]=e*this._lastTransform[s]+(1-e)*a}}get _fftBinSize(){return this._fftSize/2}_flush(){if(this._doFft(),this._isListeningTo.frequencydata){const t=new Float32Array(this._fftBinSize);this._convertFloatToDb(t),this._postMessage({type:a.frequencyDataAvailable,payload:t})}else{const t=new Uint8Array(this._fftBinSize);this._convertToByteData(t),this._postMessage({type:a.byteFrequencyDataAvailable,payload:t})}}_getFloatFrequencyData(t){const e=new Float32Array(this._fftSize/2);this._doFft(),this._convertFloatToDb(e),this._postMessage({id:t,type:a.requestedFloatFrequencyDataAvailable,payload:e.buffer},[e.buffer])}_getByteFrequencyData(t){this._doFft();const e=new Uint8Array(this._fftSize/2);this._convertToByteData(e),this._postMessage({id:t,type:a.requestedByteFrequencyDataAvailable,payload:e.buffer},[e.buffer])}process(t,e,s){const a=s.isRecording;for(let e=0;e<t.length;e++){if(1===a[e]&&t[0][0])for(let e=0;e<t[0][0].length;e++)this._appendToBuffer(t[0][0][e])}return!0}}registerProcessor("AdvancedAnalyserProcessor",l),t.AdvancedAnalyserProcessor=l,Object.defineProperty(t,"__esModule",{value:!0})}));
