(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.advancedAnalyserNode = {}));
})(this, (function (exports) { 'use strict';

  var MessageTypes;
  (function (MessageTypes) {
      MessageTypes["sendWasmModule"] = "send-wasm-module";
      MessageTypes["wasmModuleLoaded"] = "wasm-module-loaded";
      MessageTypes["initFftAnalyser"] = "init-fft-analyser";
      MessageTypes["start"] = "start";
      MessageTypes["stop"] = "stop";
      MessageTypes["dataAvailable"] = "data-available";
  })(MessageTypes || (MessageTypes = {}));

  var processor = "";

  class AdvancedAnalyserNode extends AudioWorkletNode {
      onData;
      fftSize;
      samplesBetweenTransforms;
      constructor(context, { onData, fftSize, samplesBetweenTransforms, }) {
          super(context, 'AdvancedAnalyserProcessor');
          this.port.onmessage = (event) => this.onmessage(event.data);
          this.onData = onData;
          this.fftSize = fftSize;
          this.samplesBetweenTransforms = samplesBetweenTransforms || fftSize;
          this.port.postMessage({
              type: MessageTypes.initFftAnalyser,
              sampleRate: this.context.sampleRate,
              fftSize: this.fftSize,
              samplesBetweenTransforms: this.samplesBetweenTransforms,
          });
      }
      onprocessorerror = (err) => {
          console.log(`An error from AudioWorkletProcessor.process() occurred: ${err}`);
      };
      onmessage(event) {
          if (event.type === MessageTypes.dataAvailable) {
              this.onData(event.data);
          }
      }
      start() {
          this.parameters.get('isRecording').setValueAtTime(1, this.context.currentTime);
      }
  }
  const createAdvancedAnalyserNode = async (context, options) => {
      const processorUrl = 'data:application/javascript;base64,' + processor;
      await context.audioWorklet.addModule(processorUrl);
      const advancedAnalyser = new AdvancedAnalyserNode(context, {
          ...options,
      });
      return advancedAnalyser;
  };

  exports.AdvancedAnalyserNode = AdvancedAnalyserNode;
  exports.createAdvancedAnalyserNode = createAdvancedAnalyserNode;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
