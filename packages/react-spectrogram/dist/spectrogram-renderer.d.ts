import { AdvancedAnalyserNode } from '@soundui/advanced-analyser-node';
export declare type SpectrogramRendererProperties = {
    canvas: HTMLCanvasElement;
    audioSource: AudioNode;
    isDataHandledExternally?: boolean;
    advancedAnalyserNode?: AdvancedAnalyserNode;
    data?: Uint8Array[];
    currentTime?: number;
};
export declare class SpectrogramRenderer {
    _hasInit: boolean;
    _canvas: HTMLCanvasElement;
    _audioContext: BaseAudioContext;
    _audioSource: AudioNode;
    _gl: WebGLRenderingContext;
    _glParams: {
        uVisibleTransformLocation: WebGLUniformLocation;
        uXTransformOffsetLocation: WebGLUniformLocation;
        uTextureSizeLocation: WebGLUniformLocation;
        uMinFrequencyLocation: WebGLUniformLocation;
        uMaxFrequencyLocation: WebGLUniformLocation;
        uMinDecibelsLocation: WebGLUniformLocation;
        uMaxDecibelsLocation: WebGLUniformLocation;
        uDynamicRangeLocation: WebGLUniformLocation;
        uDynamicRangeTopLocation: WebGLUniformLocation;
        uSampleRateLocation: WebGLUniformLocation;
        uViewportSize: WebGLUniformLocation;
        fftTexture: WebGLTexture;
    };
    _aaNode: AdvancedAnalyserNode;
    _isDataHandledExternally: boolean;
    _data: Uint8Array[];
    _currentTime: number;
    _textureBuffer: Uint8Array;
    _timeWindow: number;
    _minFrequency: number;
    _maxFrequency: number;
    _dynamicRange: number;
    _dynamicRangeTop: number;
    _colorMap: [number, number, number][];
    set currentTime(value: number);
    get currentTime(): number;
    get visibleTransforms(): number;
    set minFrequency(value: number);
    get minFrequency(): number;
    set maxFrequency(value: number);
    get maxFrequency(): number;
    set dynamicRange(value: number);
    get dynamicRange(): number;
    set dynamicRangeTop(value: number);
    get dynamicRangeTop(): number;
    set timeWindow(value: number);
    get timeWindow(): number;
    set colorMap(value: [number, number, number][]);
    get colorMap(): [number, number, number][];
    get fragmentShader(): string;
    constructor({ canvas, advancedAnalyserNode, audioSource, data, isDataHandledExternally, currentTime, }: SpectrogramRendererProperties);
    initAaNode(): Promise<void>;
    initGl(): void;
    updatePlayheadPosition(currentTime: number): void;
    draw(): void;
}
